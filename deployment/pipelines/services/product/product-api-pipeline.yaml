# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
    branches:
      include:
      - master
    paths:
      include:
      - src/services/Product/*
      - deployment/aks/services/product/product-api/
resources:
  containers:
  - container: trivy
    image: aquasec/trivy:0.12.0
  repositories:
    - repository: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'a4e13493-d135-43c1-914e-566cd6169f6c'
  imageRepository: 'productapi'
  containerRegistry: 'netcoremicroservicesacr.azurecr.io'
  dockerfilePath: 'src/services/Product/Product.API/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'netcoremicroservicesacr14528368-auth'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    # Docker image build
    - task: Docker@2
      displayName: Build a docker image
      inputs:
        command: build
        repository: $(containerRegistry)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(Build.SourcesDirectory)/
        arguments: --build-arg NUGET_PAT=$(NUGET_PAT_SECRET)

    # Step 3: Run Trivy scan
    - task: Docker@2
      inputs:
        command: run
        workingDirectory: $(System.DefaultWorkingDirectory)
        imageName: $(containerRegistry)/$(imageRepository):$(tag)
        containerName: trivy-scan
        environmentVariables:
          env_var_1=$(env_var_1)
          env_var_2=$(env_var_2)
          #IMAGE_NAME: $(imageRepository)
          #IMAGE_TAG: $(tag)
          #ACR_REGISTRY: $(containerRegistry)
      runOptions: "--rm --name trivy-scan -v $(System.DefaultWorkingDirectory):/app -w /app aquasec/trivy:0.12.0 trivy image $(acrLoginServer)/$(imageRepository):$(tag)"

    # Docker image push
    - task: Docker@2
      displayName: Publish a docker image
      inputs:
        command: push
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - publish: deployment/aks
      artifact: aks    

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'patrikduchnetcoremicroservices.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/aks/services/product/product-api/product-api.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)