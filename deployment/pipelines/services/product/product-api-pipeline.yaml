# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
    branches:
      include:
      - master
    paths:
      include:
      - src/services/Product/*
      - deployment/aks/services/product/product-api/

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'a4e13493-d135-43c1-914e-566cd6169f6c'
  imageRepository: 'productapi'
  containerRegistry: 'netcoremicroservicesacr.azurecr.io'
  dockerfilePath: 'src/services/Product/Product.API/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'netcoremicroservicesacr14528368-auth'
  trivyVersion: '0.37.1'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  # classic build - todo
  # then run tests - todo 
  # and after all of this => build docker container
  jobs:
  - job: Build
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    # Docker image build
    - task: Docker@2
      displayName: Build a docker image
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(Build.SourcesDirectory)/
        arguments: --build-arg NUGET_PAT=$(NUGET_PAT_SECRET)

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      env:
        NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED: true
        VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: >
          {
            "endpointCredentials": [
              {
                "endpoint": "https://pkgs.dev.azure.com/duchpatrick/netmicroservices/_packaging/NetMicroservices.Dbs/nuget/v3/index.json",
                "username": "NoRealUserNameAsIsNotRequired",
                "password": "$(NUGET_PAT_SECRET)"
              },
              {
                "endpoint": "https://pkgs.dev.azure.com/duchpatrick/netmicroservices/_packaging/NetMicroservices.Configuration/nuget/v3/index.json",
                "username": "NoRealUserNameAsIsNotRequired",
                "password": "$(NUGET_PAT_SECRET)"
              }
            ]
          }
        NUGET_PAT: $(NUGET_PAT_SECRET)
      inputs:
        command: 'restore'
        projects: 'src/services/Product/Product.Tests/Product.Tests.csproj'
        feedsToUse: 'config'
        nugetConfigPath: 'src/services/Product/Product.Tests/bin/$(buildConfiguration)/nuget.config'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      env:
        NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED: true
        VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: >
          {
            "endpointCredentials": [
              {
                "endpoint": "https://pkgs.dev.azure.com/duchpatrick/netmicroservices/_packaging/NetMicroservices.Dbs/nuget/v3/index.json",
                "username": "NoRealUserNameAsIsNotRequired",
                "password": "$(NUGET_PAT_SECRET)"
              },
              {
                "endpoint": "https://pkgs.dev.azure.com/duchpatrick/netmicroservices/_packaging/NetMicroservices.Configuration/nuget/v3/index.json",
                "username": "NoRealUserNameAsIsNotRequired",
                "password": "$(NUGET_PAT_SECRET)"
              }
            ]
          }
        NUGET_PAT: $(NUGET_PAT_SECRET)
      inputs:
        command: 'test'
        projects: 'src/services/Product/Product.Tests/Product.Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --logger trx'

    - script: |
        sudo apt-get install rpm
        wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
        sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
        trivy -v
      displayName: 'Download and install Trivy'

    - task: CmdLine@2
      displayName: "Run trivy scan"
      inputs:
        script: |
            trivy image --exit-code 0 --severity LOW,MEDIUM $(containerRegistry)/$(imageRepository):$(tag)
            trivy image --exit-code 0 --severity HIGH,CRITICAL $(containerRegistry)/$(imageRepository):$(tag)

    # Docker image push
    - task: Docker@2
      displayName: Publish a docker image
      inputs:
        command: push
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - publish: deployment/aks
      artifact: aks    
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'patrikduchnetcoremicroservices.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/aks/services/product/product-api/product-api.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)